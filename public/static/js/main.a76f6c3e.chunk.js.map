{"version":3,"sources":["components/DataContext.js","components/RatingComp.js","components/InfoView.js","components/GalleryView.js","components/VideoView.js","components/GameOverView.js","App.js","index.js"],"names":["DataContext","createContext","DataContextProvider","game","comp","useState","newData","setData","loading","setLoading","useEffect","a","temp","console","log","undefined","videos","axios","get","join","data","screenshots","cover","genres","involved_companies","important","forEach","d","developer","push","company","length","data2","dev","platforms","websites","Provider","value","colors","pickColor","val","pick","i","RatingComp","rating","amount","round","Math","className","style","backgroundColor","status","InfoView","useContext","width","height","src","image_id","name","total_rating","total_rating_count","first_release_date","Date","toDateString","map","toString","abbreviation","url","storyline","summary","GalleryView","screenPage","setScreenPage","sets","arr","newSet","amountOfSets","ceil","set","slice","divideArr","Button","variant","startIcon","onClick","index","endIcon","VideoView","videoPage","setVideoPage","controls","video_id","GameOverView","view","setView","CircularProgress","alignSelf","getData","search","setter","App","setSearch","chosen","setChosen","handleClick","type","onChange","e","target","onKeyPress","key","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a76f6c3e.chunk.js","sourcesContent":["import React, {useState, createContext, useEffect} from 'react';\nimport axios from 'axios';\n\nexport const DataContext = createContext();\n\n// this is Datacontext that is used to make all needed fetch calls\n// for data that is used in different components\n// thanks to this component i dont need to pass down props related to this data in every component\nconst DataContextProvider = ({game, comp}) => {\n  const [newData, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n        let temp = game;\n        console.log(game);\n        if (game.videos !== undefined){\n            const {data} = await axios.get(`https://korppi-loppuprojekti.herokuapp.com/specific/game_videos?where=${game.videos.join()}&key=*`)\n            temp.videos = data;\n        }\n        if (game.screenshots !== undefined){\n            const {data} = await axios.get(`https://korppi-loppuprojekti.herokuapp.com/specific/screenshots?where=${game.screenshots.join()}&key=*`)\n            temp.screenshots = data;\n        }\n        if (game.cover !== undefined){\n            const {data} = await axios.get(`https://korppi-loppuprojekti.herokuapp.com/specific/covers?where=${game.cover}&key=*`)\n            temp.cover = data;\n        }\n        if (game.genres !== undefined){\n            const {data} = await axios.get(`https://korppi-loppuprojekti.herokuapp.com/specific/genres?where=${game.genres.join()}&key=*`)\n            temp.genres = data;\n        }\n        if (game.involved_companies !== undefined){\n            const {data} = await axios.get(`https://korppi-loppuprojekti.herokuapp.com/specific/involved_companies?where=${game.involved_companies.join()}&key=*`)\n            const important = []\n            data.forEach((d) => {\n              if(d.developer === true) {\n                important.push(d.company)\n              }\n            })\n            temp.involved_companies = data;\n            if(important.length > 0){\n              const data2 = await axios.get(`https://korppi-loppuprojekti.herokuapp.com/specific/companies?where=${important.join()}&key=*`)\n              temp.dev = data2.data;\n            }\n        }\n        if (game.platforms !== undefined){\n            const {data} = await axios.get(`https://korppi-loppuprojekti.herokuapp.com/specific/platforms?where=${game.platforms.join()}&key=*`)\n            temp.platforms = data;\n        }\n        if (game.websites !== undefined){\n            const {data} = await axios.get(`https://korppi-loppuprojekti.herokuapp.com/specific/websites?where=${game.websites.join()}&key=*`)\n            temp.websites = data;\n        }\n        console.log(temp);\n        setData(temp);\n        setLoading(false);\n    })()\n  }, []);\n\n  return (\n    <DataContext.Provider\n      value={{\n        newData,\n        loading}}>\n      {comp}\n    </DataContext.Provider>\n  );\n};\n\nexport default DataContextProvider;\n","import React from \"react\"\nimport './info.scss'\n\nconst colors = ['red', 'yellow', 'green'];\n// this function is used to pick right color for background circle\nconst pickColor = (val) => {\n    let pick = ''\n    for(let i = 0; i < colors.length; i++){\n        const comp = i * 33 + 33\n        if(comp >= val){\n            pick = colors[i];\n            break;\n        }\n    }\n    return pick\n}\n\n// this is small component that builds the review score circle with color corresponding\n// to score\nfunction RatingComp({rating, amount}){\n    const round = Math.round(rating)\n    return (<div className='ratings-div'>\n        <h3>Score</h3>\n    <div className='rating-circle' style={{backgroundColor: pickColor(round)}}>\n        <p>{round}</p>\n    </div>\n    <p>Reviews: {amount}</p>\n    </div>)\n}\n\nexport default RatingComp","import React, {useContext} from \"react\"\nimport { DataContext } from \"./DataContext\"\nimport './info.scss'\nimport RatingComp from \"./RatingComp\";\n\n// this is used to pick either storyline or summary value\n// storyline is prioritized over summary\n// summary is used if storyline value is undefined\nconst pickText = (data) => {\n    if(data.storyline !== undefined){\n        return (<div className='text-container'>\n        <div className='header-div'><h3>Storyline</h3></div>\n        <div className='text-block'>\n        <p>{data.storyline}</p>\n        </div>\n    </div>)\n    } else if (data.summary !== undefined) {\n        return (<div className='text-container'>\n        <div className='header-div'><h3>Summary</h3></div>\n        <div className='text-block'>\n        <p>{data.summary}</p>\n        </div>\n\n    </div>)\n    } else {\n        return (<div className='text-container'>\n        <div className='header-div'><h3>Storyline</h3></div>\n        <p>N/A</p>\n    </div>)\n    }\n}\n// this is list of status values that i got from igdb api docs\n// this is needed cause status value in newData is index that corresponds to one of these values in status array\nconst status = ['released', 'alpha', 'beta', 'early_access', 'offline', 'cancelled', 'rumored', 'delisted']\nfunction InfoView(){\n    const {newData} = useContext(DataContext)\n    return(<div className='info-container'>\n        <div className='first-row'>\n            {newData.cover !== undefined ? <img width={'25%'} height={'95%'} src={`https://images.igdb.com/igdb/image/upload/t_original/${newData.cover[0].image_id}.jpg`}>\n            </img> : 'picture N/A'}\n            <div className='game-header'>\n                <h1>{newData.name}</h1>\n                </div>\n            <RatingComp rating={newData.total_rating} amount={newData.total_rating_count}/>\n        </div>\n        <div className='info-block'>\n        <div className='header-div'><h3>Details</h3></div>\n        <div className='details'>\n            <p>Release date: {newData.first_release_date !== undefined ? new Date(newData.first_release_date * 1000).toDateString() : 'N/A'}</p>\n            <p>Developer: {newData.dev !== undefined ? newData.dev[0].name : 'N/A'}</p>\n            <p>Genre: {newData.genres !== undefined ?\n            newData.genres.map((d) => ` ${d.name}`).toString() : 'N/A'}</p>\n            <p>Platforms: {newData.platforms !== undefined ?\n            newData.platforms.map((d) => ` ${d.abbreviation}`).toString() : 'N/A'}</p>\n            <p>Websites: {newData.websites !== undefined ?\n            newData.websites.map((d) => ` ${d.url}`).toString() : 'N/A'}</p>\n            {newData.status !== undefined && <p>Status: {status[newData.status]}</p>}\n        </div></div>\n        {pickText(newData)}\n        </div>)\n\n}\n\nexport default InfoView","import React, {useContext, useState} from \"react\"\nimport { DataContext } from \"./DataContext\"\nimport Button from '@mui/material/Button';\nimport './mediaGrid.scss'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\n\n// this is used to divide screenshot url array to max 4 element sections\n// so it is possible to show them nicely in grid\nconst divideArr = (arr) => {\n    const newSet = [];\n    const amountOfSets = Math.ceil(arr.length / 4);\n    for(let i = 0; i < amountOfSets; i++) {\n        if (i * 4 <= arr.length) {\n            const set = arr.slice((i * 4), (4 + i * 4));\n            newSet.push(set)\n        } else {\n            const set = arr.slice((i * 4), arr.length);\n            newSet.push(set);\n        }\n    }\n    return newSet\n}\n\n// this component visualizes screenshots for the game\nfunction GalleryView(){\n    const {newData} = useContext(DataContext)\n    const [screenPage, setScreenPage] = useState(0)\n    const sets = newData.screenshots !== undefined && divideArr(newData.screenshots)\n    if(newData.screenshots !== undefined) {\n    return(<div className='media-view'>\n    <div className='paging'>\n        {screenPage > 0 &&\n            <Button\n            variant='contained'\n            startIcon={<ArrowBackIcon/>}\n            onClick={() => setScreenPage((d) => d - 1)}\n            >Back</Button>\n        }\n        </div>\n    <div className='media-container'>\n    {sets[screenPage].map((d, index) => {\n        return <div key={index} className='media-item'><img\n        width='100%'\n        height='100%'\n        src={`https://images.igdb.com/igdb/image/upload/t_original/${d.image_id}.jpg`}/></div>\n    })}\n    </div>\n    <div className='paging'>\n    {screenPage < sets.length - 1 &&\n    <Button\n    variant='contained'\n    endIcon={<ArrowForwardIcon/>}\n    onClick={() => setScreenPage((d) => d + 1)}\n    >Next</Button>\n    }\n    </div>\n    </div>)} else {\n        return <div className='empty'>No Screenshots for this game</div>\n    }\n}\n\nexport default GalleryView","import React, {useContext, useState} from \"react\"\nimport { DataContext } from \"./DataContext\"\nimport ReactPlayer from \"react-player\";\nimport Button from '@mui/material/Button';\nimport './mediaGrid.scss'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\n\n// this shares the same logic as in GalleryView\nconst divideArr = (arr) => {\n    const newSet = [];\n    const amountOfSets = Math.ceil(arr.length / 4);\n    for(let i = 0; i < amountOfSets; i++) {\n        if (i * 4 <= arr.length) {\n            const set = arr.slice((i * 4), (4 + i * 4));\n            newSet.push(set)\n        } else {\n            const set = arr.slice((i * 4), arr.length);\n            newSet.push(set);\n        }\n    }\n    return newSet\n}\n// this component handles visualizing videos related to the game\nfunction VideoView(){\n    const {newData} = useContext(DataContext)\n    const [videoPage, setVideoPage] = useState(0)\n    const sets = newData.videos !== undefined && divideArr(newData.videos)\n    if(newData.videos !== undefined) {\n        return(<div className='media-view'>\n        <div className='paging'>\n        {videoPage > 0 &&\n            <Button\n            variant='contained'\n            startIcon={<ArrowBackIcon/>}\n            onClick={() => setVideoPage((d) => d - 1)}\n            >Back</Button>\n        }\n        </div>\n        <div className='media-container'>\n        {sets[videoPage].map((d, index) => {\n            return <div key={index} className='media-item'><ReactPlayer\n            controls={true}\n            width='100%'\n            height='100%'\n            url={`https://www.youtube.com/watch?v=${d.video_id}`}/></div>\n        })}\n    </div>\n    <div className='paging'>\n    {videoPage < sets.length - 1 &&\n    <Button\n    variant='contained'\n    endIcon={<ArrowForwardIcon/>}\n    onClick={() => setVideoPage((d) => d + 1)}\n    >Next</Button>\n    }\n    </div>\n    </div>)\n    } else {\n        return <div className='empty'>No videos for this game</div>\n    }\n\n}\n\nexport default VideoView","import React, {useState, useContext} from \"react\"\nimport InfoView from \"./InfoView\"\nimport GalleryView from \"./GalleryView\"\nimport VideoView from \"./VideoView\"\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { DataContext } from \"./DataContext\"\n\n\n// this component handles which view is currently active\n// views are changed with buttons\nfunction GameOverView(){\n\n    const [view, setView] = useState(<InfoView/>)\n    const {loading} = useContext(DataContext)\n\n    return(<div className=\"overview-area\">\n        {loading !== true ? <>\n        <div className=\"navigation\">\n            <button onClick={()=> setView(<InfoView/>)}>Info</button>\n            <button onClick={()=> setView(<GalleryView/>)}>Screenshots</button>\n            <button onClick={()=> setView(<VideoView/>)}>Videos</button>\n        </div>\n            <div className=\"view\">\n            {view}\n            </div></> : <CircularProgress style={{alignSelf: 'center'}}/>\n        }\n    </div>)\n\n}\n\nexport default GameOverView","import React, { useState} from \"react\";\nimport GameOverView from \"./components/GameOverView\";\nimport './Main.scss'\nimport axios from 'axios';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport DataContextProvider from \"./components/DataContext\";\n\n// this function fetches the searched game and sets data to data state as well as loading to false\nconst getData = async (search, setter, loading) => {\n  const {data} = await axios.get(`https://korppi-loppuprojekti.herokuapp.com/search?search=${search}`)\n  setter(data)\n  loading(false)\n}\n// this is the main component\nfunction App() {\n  const [data, setData] = useState([])\n  const [search, setSearch] = useState('')\n  const [chosen, setChosen] = useState(null)\n  const [loading, setLoading] = useState(false);\n  // this is search button click event handler it starts the data fetch\n  const handleClick = () => {\n    setChosen(null)\n    setData([])\n    setLoading(true)\n    getData(search, setData, setLoading)\n  }\n\n  // this sets the game json object as the one that will be used in child components\n  // its the one user picked\n  const updateChosen = (val) => {\n    setChosen(val)\n  }\n\n  return (\n    <div className=\"Main\">\n      <div className=\"search-bar\">\n        <div className=\"headline\">\n          <h2>Gaming app</h2>\n        </div>\n        <div className=\"search\">\n        <input\n        type='text'\n        onChange={(e) => setSearch(e.target.value)}\n        onKeyPress={(e) => e.key === 'Enter' && handleClick()}></input>\n        <button onClick={() => handleClick()}>Search</button>\n        </div>\n      </div>\n      <div className='background'>\n      {chosen === null ? <div className=\"results-div\">\n        {loading === true ? <CircularProgress/> :\n        <ul>\n          {data.map((d) => {\n              return <li key={d.id} className=\"result-row\"><label>{d.name}</label><button onClick={() => updateChosen(d)}>Select</button></li>\n          })}\n        </ul>}\n      </div> : <DataContextProvider game={chosen} comp={<GameOverView/>}/>\n      }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}